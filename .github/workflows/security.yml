name: Security Scanning

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security scans
    - cron: '0 6 * * 1'

jobs:
  codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # Override default queries with security-focused ones
        queries: security-and-quality
    
    - name: Set up Node.js (for JavaScript analysis)
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: src/web-client/package-lock.json
    
    - name: Install JavaScript dependencies
      if: matrix.language == 'javascript'
      run: |
        cd src/web-client
        npm ci
    
    - name: Set up Python (for Python analysis)
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        cache: 'pip'
        cache-dependency-path: src/ml-service/requirements.txt
    
    - name: Install Python dependencies
      if: matrix.language == 'python'
      run: |
        cd src/ml-service
        pip install -r requirements.txt
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        # Fail on critical vulnerabilities
        fail-on-severity: critical
        # Allow GPL licenses for development dependencies only
        deny-licenses: GPL-2.0, GPL-3.0, LGPL-2.0, LGPL-2.1, LGPL-3.0
        # Comment on PR with findings
        comment-summary-in-pr: true

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker images
      run: |
        docker build -t test-web-client ./src/web-client
        docker build -t test-ml-service ./src/ml-service
    
    - name: Run Trivy vulnerability scanner (web-client)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'test-web-client'
        format: 'sarif'
        output: 'trivy-web-client.sarif'
    
    - name: Run Trivy vulnerability scanner (ml-service)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'test-ml-service'
        format: 'sarif'
        output: 'trivy-ml-service.sarif'
    
    - name: Upload Trivy scan results (web-client)
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-web-client.sarif'
        category: 'trivy-web-client'
    
    - name: Upload Trivy scan results (ml-service)
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-ml-service.sarif'
        category: 'trivy-ml-service'
    
    - name: Docker Scout scan
      if: always()
      run: |
        # Use Docker Scout (free tier)
        echo "Running Docker Scout security analysis..."
        docker scout quickview test-web-client || echo "Docker Scout analysis completed"
        docker scout quickview test-ml-service || echo "Docker Scout analysis completed"

  secrets-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch full history for secret scanning
        fetch-depth: 0
    
    - name: TruffleHog OSS Secret Scanning
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: src/web-client/package-lock.json
    
    - name: Install dependencies
      run: |
        cd src/web-client
        npm ci
    
    - name: Check JavaScript licenses
      run: |
        cd src/web-client
        npx license-checker --summary --onlyAllow "MIT;ISC;BSD-2-Clause;BSD-3-Clause;Apache-2.0;Unlicense;WTFPL;CC0-1.0"
    
    - name: Check Python licenses
      run: |
        cd src/ml-service
        pip install pip-licenses
        pip-licenses --format=json --with-license-file --no-license-path > python-licenses.json
        echo "üìã Python License Summary:"
        pip-licenses --summary --order=license
    
    - name: Validate project license
      run: |
        if [ ! -f LICENSE ]; then
          echo "‚ùå No LICENSE file found"
          exit 1
        fi
        
        if grep -q "Apache License" LICENSE; then
          echo "‚úÖ Apache 2.0 license detected"
        else
          echo "‚ö†Ô∏è License file exists but may not be Apache 2.0"
        fi
    
    - name: Check NOTICE file
      run: |
        if [ ! -f NOTICE ]; then
          echo "‚ö†Ô∏è No NOTICE file found (recommended for Apache 2.0)"
        else
          echo "‚úÖ NOTICE file found"
          head -5 NOTICE
        fi
